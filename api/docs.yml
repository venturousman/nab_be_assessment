openapi: 3.0.1
info:
  title: User API
  description: 'This is a sample User API created with Express.js. You can find more about it [here](https://github.com/kasramp/sample-rest-with-expressjs).'
  contact:
    email: kasra@madadipouya.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
tags:
- name: user
  description: Operations about user
paths:
  /api/v1/users:
    get:
      tags:
      - user
      summary: Get list of users
      operationId: getUsers
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                type: string
    post:
      tags:
      - user
      summary: Create a user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid payload supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/users/{id}:
    get:
      tags:
      - user
      summary: Get a user by id
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: 'The id of a user'
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid id supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - user
      summary: Update a user
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: id of a user to update
        required: true
        schema:
          type: integer
      requestBody:
        description: Updated user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid payload supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - user
      summary: Delete a user
      operationId: deleteUserById
      parameters:
      - name: id
        in: path
        description: The id of user to be deleted
        required: true
        schema:
          type: integer
      responses:
        204:
          description: User deleted successfully
        400:
          description: Invalid id supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    UserDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
          format: int64
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
          format: int64
    Error:
      type: object
      properties:
        error: 
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string